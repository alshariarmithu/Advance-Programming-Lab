#include <iostream>
#include <iomanip>
using namespace std;

// Function to perform LU decomposition
void luDecomposition(float A[4][4], float L[4][4], float U[4][4]) {
    for (int i = 0; i < 4; i++) {
        // Upper Triangular
        for (int k = i; k < 4; k++) {
            // Summation of L(i, j) * U(j, k)
            float sum = 0;
            for (int j = 0; j < i; j++)
                sum += (L[i][j] * U[j][k]);
            // Evaluating U(i, k)
            U[i][k] = A[i][k] - sum;
        }

        // Lower Triangular
        for (int k = i; k < 4; k++) {
            if (i == k)
                L[i][i] = 1; // Diagonal as 1
            else {
                // Summation of L(k, j) * U(j, i)
                float sum = 0;
                for (int j = 0; j < i; j++)
                    sum += (L[k][j] * U[j][i]);
                // Evaluating L(k, i)
                L[k][i] = (A[k][i] - sum) / U[i][i];
            }
        }
    }
}

// Function to display a matrix
void displayMatrix(float matrix[4][4]) {
    for (int i = 0; i < 4; i++) {
        for (int j = 0; j < 4; j++) {
            cout << setw(10) << matrix[i][j] << "\t";
        }
        cout << endl;
    }
}

int main() {
    float A[4][4] = {
        {2, -1, -2, 1},
        {-4, 6, 3, -2},
        {-4, -2, 8, -3},
        {2, 3, -3, 7}
    };

    float L[4][4] = {0}, U[4][4] = {0};

    // Perform LU Decomposition
    luDecomposition(A, L, U);

    // Display the results
    cout << "Lower Triangular Matrix (L):\n";
    displayMatrix(L);
    cout << "\nUpper Triangular Matrix (U):\n";
    displayMatrix(U);

    return 0;
}
